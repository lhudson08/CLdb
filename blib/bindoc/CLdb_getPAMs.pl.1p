.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLDB_GETPAMS 1"
.TH CLDB_GETPAMS 1 "2013-09-30" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CLdb_getPAMs.pl \-\- getting PAMs from spacer blast hits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
CLdb_getPAMs.pl [flags] > PAM\-spacer.fna
.SS "Required flags"
.IX Subsection "Required flags"
.IP "\-database  <char>" 4
.IX Item "-database  <char>"
CLdb database.
.SS "options"
.IX Subsection "options"
.IP "\-subtype  <char>" 4
.IX Item "-subtype  <char>"
Refine query to specific a subtype(s) (>1 argument allowed).
.IP "\-taxon_id  <char>" 4
.IX Item "-taxon_id  <char>"
Refine query to specific a taxon_id(s) (>1 argument allowed).
.IP "\-taxon_name  <char>" 4
.IX Item "-taxon_name  <char>"
Refine query to specific a taxon_name(s) (>1 argument allowed).
.IP "\-query  <char>" 4
.IX Item "-query  <char>"
Extra sql to refine the query.
.IP "\-staxon_id  <char>" 4
.IX Item "-staxon_id  <char>"
\&\s-1BLAST\s0 subject taxon_id (>1 argument allowed)
.IP "\-staxon_name  <char>" 4
.IX Item "-staxon_name  <char>"
\&\s-1BLAST\s0 subject taxon_name (>1 argument allowed)
.IP "\-saccession  <char>" 4
.IX Item "-saccession  <char>"
\&\s-1BLAST\s0 accession number (>1 argument allowed)
.IP "\-align  <bool>" 4
.IX Item "-align  <bool>"
Align the 5' & 3' end of protospacers by adding gaps in
the middle of the protospacer. [\s-1TRUE\s0]
.IP "\-group  <bool>" 4
.IX Item "-group  <bool>"
Get protospacers by spacer group (ie. de-replicated spacers). [\s-1TRUE\s0]
.IP "\-region  <int>" 4
.IX Item "-region  <int>"
Write just the 3' (\-r 3) or 5' (\-r 5) region adjacent to protospacer.
.IP "\-qlength  <int>" 4
.IX Item "-qlength  <int>"
Length cutoff for blast hit (>=; fraction of spacer length). [0.66]
.IP "\-slength  <int>" 4
.IX Item "-slength  <int>"
Spacer max total length (<=; bp). [ ]
.IP "\-x  <int>" 4
.IX Item "-x  <int>"
Extension beyond spacer blast to check for PAMs (bp). [10]
.IP "\-verbose  <bool>" 4
.IX Item "-verbose  <bool>"
Verbose output. [\s-1FALSE\s0]
.IP "\-help  <bool>" 4
.IX Item "-help  <bool>"
This help message
.SS "For more information:"
.IX Subsection "For more information:"
perldoc CLdb_getPAMs.pl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Get sequences of protospacers (found via 
blast hits) plus adjacent nucleotides
to look for PAMs.
.PP
Only spacer blast hits that were not found
to fall into a \s-1CRISPR\s0 array are queried
(must run CLdb_spacerBlastDRFilter.pl 1st!).
.SS "Output"
.IX Subsection "Output"
The spacer blast hit sequence is capitalized, while the 
extended region around the hit is lower case.
.PP
\fIDefault sequence naming (by spacer group)\fR
.IX Subsection "Default sequence naming (by spacer group)"
.PP
\&\*(L"Spacer_group\*(R"_\|_\*(L"cli#\*(R"_\|_\*(L"spacer_ID\*(R"_\|_\*(L"Subject_Taxon_Name\*(R"_\|_
\&\*(L"Subject_Taxon_ID\*(R"_\|_\*(L"Subject_scaffold_name\*(R"_\|_\*(L"protospacer_start\*(R"_\|_\*(L"protospacer_end\*(R"_\|_\*(L"strand\*(R"
.PP
\fINaming if '\-g' flag (not by spacer group; by individual spacer)\fR
.IX Subsection "Naming if '-g' flag (not by spacer group; by individual spacer)"
.PP
\&\*(L"Spacer_group\*(R"_\|_\*(L"Subject_Taxon_Name\*(R"_\|_\*(L"Subject_Taxon_ID\*(R"
_\|_\*(L"Subject_scaffold_name\*(R"_\|_\*(L"protospacer_start\*(R"_\|_\*(L"protospacer_end\*(R"_\|_\*(L"strand\*(R"
.PP
\&\*(L"Subject\*(R" = subject in the spacer blast.
.PP
\&\*(L"\s-1NULL\s0\*(R" will be used if any values are \s-1NULL\s0 in CLdb.
.SS "Requirements for analysis"
.IX Subsection "Requirements for analysis"
\fIOrientation of the written sequences\fR
.IX Subsection "Orientation of the written sequences"
.PP
The protospacer (& adjacent) regions as oriented so that 
the 3' end is on the left. The sequence is actually the complement of
the protospacer.
.IP "\(bu" 4
Spacer blasting with CLdb_spacerBlastGenome.pl or CLdb_spacerBlastDB.pl must be done prior
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Protospacers for all hits (by spacer group)"
.IX Subsection "Protospacers for all hits (by spacer group)"
CLdb_getPAMs.pl \-d CLdb.sqlite > all_proto.fasta
.SS "Protospacers for all hits (each identical spacer in each spacer group)"
.IX Subsection "Protospacers for all hits (each identical spacer in each spacer group)"
CLdb_getPAMs.pl \-d CLdb.sqlite \-g > all_proto_each.fasta
.SS "Protospacers for just spacers in subtype I\-B"
.IX Subsection "Protospacers for just spacers in subtype I-B"
CLdb_getPAMs.pl \-d CLdb.sqlite \-subtype I\-B" > I\-B_proto.fasta
.SS "Protospacers for just subtype I\-B smaller extention"
.IX Subsection "Protospacers for just subtype I-B smaller extention"
CLdb_getPAMs.pl \-d CLdb.sqlite \-subtype I\-B" \-x 5 > I\-B_proto.fasta
.SS "Protospacers from just 2 subject taxon_names"
.IX Subsection "Protospacers from just 2 subject taxon_names"
CLdb_getPAMs.pl \-d CLdb.sqlite \-staxon_name ecoli salmonela > proto_coli_sal.fasta
.SS "Just the 3' region adjacent to the protospacer"
.IX Subsection "Just the 3' region adjacent to the protospacer"
CLdb_getPAMs.pl \-d CLdb.sqlite \-subtype I\-B" \-r 3 > I\-B_proto_3prime.fasta
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Youngblut <nyoungb2@illinois.edu>
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
sharchaea.life.uiuc.edu:/home/git/CLdb/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010, 2011
This software is licensed under the terms of the GPLv3
