.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLDB_SPACERBLASTGENOME 1"
.TH CLDB_SPACERBLASTGENOME 1 "2013-09-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CLdb_spacerBlastGenome.pl \-\- BLASTn\-short of spacers and/or DRs against a genome in CLdb
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
CLdb_spacerBlastGenome.pl [flags]
.SS "Required flags"
.IX Subsection "Required flags"
.IP "\-database  <char>" 4
.IX Item "-database  <char>"
CLdb database.
.IP "\-fasta  <char>" 4
.IX Item "-fasta  <char>"
A fasta of either spacer or \s-1DR\s0 group sequences (use: CLdb_array2fasta.pl \-g)
.SS "Optional flags"
.IX Subsection "Optional flags"
.IP "\-subtype  <char>" 4
.IX Item "-subtype  <char>"
Refine query to specific a subtype(s) (>1 argument allowed).
.IP "\-taxon_id  <char>" 4
.IX Item "-taxon_id  <char>"
Refine query to specific a taxon_id(s) (>1 argument allowed).
.IP "\-taxon_name  <char>" 4
.IX Item "-taxon_name  <char>"
Refine query to specific a taxon_name(s) (>1 argument allowed).
.IP "\-query  <char>" 4
.IX Item "-query  <char>"
Extra sql to refine which sequences are returned.
.IP "\-blast  <char>" 4
.IX Item "-blast  <char>"
BLASTn parameters (besides required flags). [\-evalue 0.001]
.IP "\-num_threads  <int>" 4
.IX Item "-num_threads  <int>"
Use for '\-num_threads' parameter in BLASTn. [1]
.IP "\-x  <int>" 4
.IX Item "-x  <int>"
Retain blast hit subject sequence fragment + '\-x' bp on either side of fragment. [20]
.IP "\-v  <bool>" 4
.IX Item "-v  <bool>"
Verbose output. [\s-1TRUE\s0]
.IP "\-h  <bool>" 4
.IX Item "-h  <bool>"
This help message
.SS "For more information:"
.IX Subsection "For more information:"
perldoc CLdb_spacerBlastGenome.pl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Run blastn-short against one or more genomes
already in CLdb (word_size=7, reward=1, DUST=off). 
Specific genomes can be
selected by subtype ('\-subtype'), taxon_name
('\-taxon_name'), taxon_id ('taxon_id'), or
other sql refinements of the query ('\-query').
.PP
Genomes are obtained from the 'fasta_file'
values in the loci table.
Fasta files should be in the CLdb/fasta/ directory 
(copied by CLdb_loadLoci.pl).
If no fasta file is found, the genome sequence
is extracted from the genbank file ('genbank_file'
in loci table). The genome is skipped if still 
no sequence can be found.
.PP
Spacer and \s-1DR\s0 groups can be blasted at the same time.
.PP
It may be best to blast all DRs at once for 
subsequent spacer array screening (spacers that
have adjacent \s-1DR\s0 hits are considered to be located
in \s-1CRISPR\s0 arrays and are thus not protospacers).
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Blasting all spacers against all genomes in CLdb"
.IX Subsection "Blasting all spacers against all genomes in CLdb"
CLdb_array2fasta.pl \-g > all_spacer_groups.fna
.PP
CLdb_spacerBlastGenome.pl \-d CLdb.sqlite \-f all_spacer_groups.fna
.SS "Blasting all DRs against all genomes in CLdb"
.IX Subsection "Blasting all DRs against all genomes in CLdb"
CLdb_array2fasta.pl \-r \-g > all_DR_groups.fna
.PP
CLdb_spacerBlastGenome.pl \-d CLdb.sqlite \-f all_DR_groups.fna
.SS "Blasting all spacers against 1 genome"
.IX Subsection "Blasting all spacers against 1 genome"
CLdb_array2fasta.pl \-g > all_spacer_groups.fna
.PP
CLdb_spacerBlastGenome.pl \-d CLdb.sqlite \-f all_spacer_groups.fna \-taxon_name \*(L"e.coli\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Youngblut <nyoungb2@illinois.edu>
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
sharchaea.life.uiuc.edu:/home/git/CLdb/
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010, 2011
This software is licensed under the terms of the GPLv3
